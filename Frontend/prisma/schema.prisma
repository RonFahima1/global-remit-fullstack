generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(cuid())
  name               String?
  email              String           @unique
  password           String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  address            String?
  city               String?
  country            String?
  createdBy          String?
  dateOfBirth        DateTime?
  department         String?
  emailVerified      DateTime?
  employeeId         String?          @unique
  failedAttempts     Int              @default(0)
  hireDate           DateTime?
  lastLogin          DateTime?
  lastPasswordChange DateTime?
  onboardingData     Json?
  onboardingStatus   OnboardingStatus @default(PENDING)
  onboardingStep     Int              @default(1)
  phone              String?
  phoneVerified      DateTime?
  position           String?
  postalCode         String?
  state              String?
  status             UserStatus       @default(PENDING_VERIFICATION)
  role               UserRole         @default(AGENT_USER)
  organizationId     String?
  agentId            String?
  territory          String[]
  mustChangePassword Boolean          @default(false)
  terminationDate    DateTime?
  username           String?          @unique
  firstName          String?
  lastName           String?
  accounts           Account[]
  documents          Document[]
  passkeys           Passkey[]
  sessions           Session[]
  createdByUser      User?            @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers       User[]           @relation("UserCreatedBy")
  sentInvitations    Invitation[]     @relation("UserInvitedBy")

  @@index([email, createdAt])
  @@index([role, status])
  @@index([onboardingStatus])
  @@index([employeeId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([organizationId])
  @@index([agentId])
  @@index([username])
  @@index([status])
}

model Passkey {
  id           String    @id @default(cuid())
  userId       String
  name         String
  credentialId String    @unique
  publicKey    String
  signCount    Int       @default(0)
  transports   String[]
  createdAt    DateTime  @default(now())
  lastUsed     DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([credentialId])
}

model Document {
  id           String    @id @default(cuid())
  userId       String
  type         String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  status       String    @default("PENDING")
  verifiedAt   DateTime?
  verifiedBy   String?
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id           String    @id @default(cuid())
  email        String
  role         UserRole
  token        String    @unique
  invitedBy    String
  organization String?
  agentId      String?
  expiresAt    DateTime
  usedAt       DateTime?
  createdAt    DateTime  @default(now())
  invitedByUser User     @relation("UserInvitedBy", fields: [invitedBy], references: [id])

  @@index([email])
  @@index([token])
  @@index([expiresAt])
}

enum UserRole {
  ORG_ADMIN
  AGENT_ADMIN
  AGENT_USER
  COMPLIANCE_USER
  ORG_USER
  GLOBAL_VIEWER
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  DISABLED
  SUSPENDED
  LOCKED
  DELETED
}

enum OnboardingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}
